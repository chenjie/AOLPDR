character_segmentation.py

threshold_plate:
Perform character segmentation. 首先将图片进行二值化(inverse)，然后用find contour 找到character的外轮廓

threshold_plate_enhance:
图片二值化 在某些情况下会有很差的效果，例如，车牌的一半被阴影遮盖. 通过Stack Overflow 得到enhance 算法。
然后用 find contour 找到character 的外轮廓

Segmentation 步骤:

Step1: 照片二值化 (Binary Threshold)
Step2: 通过 measure.label 找二值化图片中连在一起的regions，用np.unique找出独立的regions, 若region = 0 即为background
Step3: 展示每一个独立regions (create mask)
Step4: 在每一个独立region里，apply OpenCV 的 findcontour，找出最大外轮廓
Step5: 通过外轮廓的大小比例以及面积，确认该region是不是 candidate character
	(Solidity is the ratio of contour area to its convex hull area.)
Step6: 将合格的regions 画到原图上

Threshold 调整:

Plate4.png (failed case) ================================

aspectRatio: 0.417910447761194
heightRatio: 0.38285714285714284
solidity: 0.8939232409381663

aspectRatio: 0.43283582089552236
heightRatio: 0.38285714285714284
solidity: 0.5617601646937725

aspectRatio: 0.4393939393939394
heightRatio: 0.37714285714285717
solidity: 0.8863636363636364

aspectRatio: 0.42424242424242425
heightRatio: 0.37714285714285717
solidity: 0.9063852813852814

aspectRatio: 0.4393939393939394
heightRatio: 0.37714285714285717
solidity: 0.4093521421107628

aspectRatio: 0.4393939393939394
heightRatio: 0.37714285714285717
solidity: 0.5326541274817137

Plate3.png (success) =========================================

aspectRatio: 0.359375
heightRatio: 0.4050632911392405
solidity: 0.48539402173913043

aspectRatio: 0.375
heightRatio: 0.4050632911392405
solidity: 0.5960286458333334

aspectRatio: 0.375
heightRatio: 0.4050632911392405
solidity: 0.6624348958333334

Plate1.png (success) =========================================

aspectRatio: 0.4011299435028249
heightRatio: 0.46578947368421053
solidity: 0.36770907933476565

aspectRatio: 0.3977272727272727
heightRatio: 0.4631578947368421
solidity: 0.3261363636363636

aspectRatio: 0.40229885057471265
heightRatio: 0.45789473684210524
solidity: 0.6904351395730706

通过修改 threshold， plate4 不再fail 但这个threshold 无法识别出 1 因为 1 特别窄
获取 几幅图中 1 的参数

Plate1.png
aspectRatio: 0.29545454545454547
heightRatio: 0.4631578947368421
solidity: 0.4366258741258741

Plate2.jpeg
aspectRatio: 0.2714285714285714
heightRatio: 0.445859872611465
solidity: 0.3706766917293233

Current Threshold
0.32 < aspectRatio < 0.46
solidity > 0.25
heightRatio > 0.3 and heightRatio < 0.5

New Threshold (修改 aspect ratio)
0.2 < aspectRatio < 0.46
solidity > 0.25
heightRatio > 0.3 and heightRatio < 0.5













Detect Plate:
安大略省的车牌 长:宽 1：2

使用opencv检测车牌需要涉及形态学
https://www.jianshu.com/p/05ef50ac89ac
https://blog.csdn.net/keith_bb/article/details/54578186?locationNum=6&fps=1
https://www.cnblogs.com/little-monkey/p/7236188.html

开/闭运算 (Opening/Closing)
先腐蚀后膨胀叫开运算（因为先腐蚀会分开物体，这样容易记住），其作用是：分离物体，消除小区域。这类形态学操作用cv2.morphologyEx()函数实现

闭运算(Closing) 
闭运算在数学上是先膨胀再腐蚀的结果
能够排除小型黑洞(黑色区域)，能够平滑对象的轮廓，但是与开运算不同的是闭运算一般会将狭窄的缺口连接起来形成细长的弯口，并填充比结构元素小的洞。 


黑帽：闭运算后的图减去原图：closing - src
黑帽运算后的效果图突出了比原图轮廓周围的区域更暗的区域，且这一操作和选择的核的大小相关。(车牌的比例)
所以，黑帽运算用来分离比邻近点暗一些的斑块。非常完美的轮廓效果图（我们的case因为车牌和车牌号的颜色反差较大，深蓝色和白色，所以适合使用黑帽运算）

APPLYING A SIMPLE BLACKHAT OPERATION IS ENOUGH TO REVEAL THE DARK TEXT OF THE LICENSE PLATE CHARACTERS AGAINST THE LIGHT BACKGROUND.

顶帽操作往往用来分离比邻近点亮一些的板块，在一幅图像具有大幅背景而微小物品比较有规律的情况下，可以使用顶帽运算进行背景提取。黑帽运算后的效果图突出了比原图轮廓周围的区域更暗的区域，这一操作也与选择的核尺寸有关。

OTSU's method
An image thresholding algorithm for reduction of a gray level image to a binary image. Otsu’s thresholding chooses the threshold to minimize the intraclass variance of the thresholded black and white pixels.
作用在于segmentation


方案一：


方案二: 
https://blog.csdn.net/linqianbi/article/details/79096630
- Gaussian Filter
- 灰度图
- Sobel x (conver sobel abs)
- Otsu
- Closing

方案三
http://www.cnblogs.com/thunder-wu/p/6985169.html?utm_source=itdadao&utm_medium=referral

方案四：
https://www.cnblogs.com/polly333/p/7367479.html
1、图像转化为HSV图像，获取V通道图像

2、提高对比度

3、V图像高斯滤波，去除噪声

4、图像二值化

方案五：
http://blog.sina.com.cn/s/blog_1754158f50102wpmi.html

方案六：
https://blog.csdn.net/sumkee911/article/details/79435983






============================================
 Character Recognition
============================================
Use Tensorflor Extended MNIST aka EMNIST
Follow tutorial on tensorflow websites and tutorial on Towards Data Science


https://towardsdatascience.com/tutorial-alphabet-recognition-deeplearning-opencv-97e697b8fb86

https://www.tensorflow.org/tutorials/

https://github.com/Josh-Payne/cs230/blob/master/Alphanumeric-Augmented-CNN/augmented-cnn.py

https://stackoverflow.com/questions/50890713/reading-emnist-dataset






